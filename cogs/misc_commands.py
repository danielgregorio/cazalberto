import discord
from discord.ext import commands
from discord import app_commands
import random
import logging

from config import JOKES_FILE
from utils import load_json

class MiscCommands(commands.Cog):
    """Comandos diversos do Cazalberto."""
    
    def __init__(self, bot):
        self.bot = bot
        self.jokes = load_json(JOKES_FILE)
        
        # Se n√£o houver piadas carregadas, usar uma lista padr√£o
        if not self.jokes:
            self.jokes = [
                "Por que o livro de matem√°tica se suicidou? Porque tinha muitos problemas!",
                "O que um pato disse para o outro? Estamos empatados!",
                "Por que a vaca foi para o espa√ßo? Para ver a Via L√°ctea!",
                "O que o zero disse para o oito? Belo cinto!",
                "Por que o esqueleto n√£o brigou com ningu√©m? Porque ele n√£o tem est√¥mago para isso!"
            ]
    
    @app_commands.command(name="piada", description="Conta uma piada aleat√≥ria.")
    async def tell_joke(self, ctx: discord.Interaction):
        """Conta uma piada aleat√≥ria."""
        joke = random.choice(self.jokes)
        await ctx.response.send_message(joke)
        
    @app_commands.command(name="status", description="Mostra informa√ß√µes sobre o estado do bot.")
    async def status(self, ctx: discord.Interaction):
        """Mostra informa√ß√µes sobre o estado do bot."""
        # Checa conex√£o de voz
        vc = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        voice_status = "‚úÖ Conectado" if vc and vc.is_connected() else "‚ùå Desconectado"
        playing_status = "‚úÖ Tocando √°udio" if vc and vc.is_playing() else "‚ùå N√£o est√° tocando"
        
        # Informa√ß√µes gerais do bot
        latency = round(self.bot.latency * 1000)  # Converte para ms
        uptime = discord.utils.utcnow() - self.bot.user.created_at
        uptime_str = f"{uptime.days}d {uptime.seconds // 3600}h {(uptime.seconds // 60) % 60}m"
        
        # Comandos dispon√≠veis
        commands_count = len(self.bot.tree.get_commands())
        
        # Status do canal de voz
        channel_name = vc.channel.name if vc and vc.is_connected() else "Nenhum"
        
        # Formata a mensagem
        embed = discord.Embed(
            title="Status do Cazalberto",
            description="Informa√ß√µes sobre o estado atual do bot",
            color=0x00ff00 if vc and vc.is_connected() else 0xff0000
        )
        
        embed.add_field(name="Status de Voz", value=voice_status, inline=True)
        embed.add_field(name="Status de √Åudio", value=playing_status, inline=True)
        embed.add_field(name="Canal Atual", value=channel_name, inline=True)
        
        embed.add_field(name="Lat√™ncia", value=f"{latency}ms", inline=True)
        embed.add_field(name="Tempo Online", value=uptime_str, inline=True)
        embed.add_field(name="Comandos", value=str(commands_count), inline=True)
        
        embed.set_footer(text="Use /ajuda para ver todos os comandos dispon√≠veis")
        
        await ctx.response.send_message(embed=embed)
        
    @app_commands.command(name="ajuda", description="Mostra informa√ß√µes de ajuda sobre os comandos dispon√≠veis.")
    async def help_command(self, ctx: discord.Interaction):
        """Mostra informa√ß√µes de ajuda sobre os comandos dispon√≠veis."""
        embed = discord.Embed(
            title="Comandos do Cazalberto",
            description="Aqui est√£o os comandos dispon√≠veis do bot:",
            color=0x3498db
        )
        
        # Comandos de √°udio
        embed.add_field(
            name="üéµ Comandos de √Åudio",
            value=(
                "`/tocar [comando]` - Toca um √°udio salvo\n"
                "`/aprender [comando] [url]` - Adiciona um novo √°udio\n"
                "`/aprendido` - Lista todos os √°udios salvos\n"
                "`/esquecer [comando]` - Remove um √°udio\n"
                "`/aprendido_wow [expans√£o]` - Lista √°udios de uma expans√£o do WoW"
            ),
            inline=False
        )
        
        # Comandos de playlist
        embed.add_field(
            name="üíø Comandos de Playlist",
            value=(
                "`/criar_playlist [nome]` - Cria uma nova playlist\n"
                "`/adicionar_playlist [playlist] [audio]` - Adiciona √°udio √† playlist\n"
                "`/remover_playlist [playlist] [audio]` - Remove √°udio da playlist\n"
                "`/ver_playlist [playlist]` - Mostra os √°udios de uma playlist\n"
                "`/listar_playlists` - Lista todas as playlists\n"
                "`/excluir_playlist [playlist]` - Exclui uma playlist\n"
                "`/tocar_playlist [playlist] [repetir] [aleatorio]` - Toca uma playlist"
            ),
            inline=False
        )
        
        # Comandos diversos
        embed.add_field(
            name="üíª Outros Comandos",
            value=(
                "`/piada` - Conta uma piada aleat√≥ria\n"
                "`/status` - Mostra informa√ß√µes sobre o estado do bot\n"
                "`/sair` - Faz o bot sair do canal de voz"
            ),
            inline=False
        )
        
        # Dicas de uso
        embed.add_field(
            name="üí° Dicas",
            value=(
                "‚Ä¢ Para tocar m√∫sicas do WoW, use `/tocar [expans√£o]-[m√∫sica]`\n"
                "‚Ä¢ Exemplos: `/tocar wotlk-dalaran` ou `/tocar classic-elwynn`\n"
                "‚Ä¢ Os √°udios personalizados podem ser tocados diretamente: `/tocar nome`"
            ),
            inline=False
        )
        
        # Rodap√© com informa√ß√µes do desenvolvedor
        embed.set_footer(text="Desenvolvido por Daniel Gregorio | v1.0.0")
        
        await ctx.response.send_message(embed=embed)
    
    @commands.command(name="sync")
    async def sync_command(self, ctx):
        """Sincroniza os comandos slash com o Discord (comando de prefixo)."""
        if ctx.author.guild_permissions.administrator:  # Apenas administradores podem usar
            try:
                await ctx.send("üîÑ Iniciando sincroniza√ß√£o...")
                
                # Sincroniza globalmente (para todos os servidores)
                synced_global = await self.bot.tree.sync()
                await ctx.send(f"üåê Sincronizados {len(synced_global)} comandos globalmente!")
                
                # Sincroniza com o servidor atual
                synced = await self.bot.tree.sync(guild=ctx.guild)
                await ctx.send(f"‚úÖ Sincronizados {len(synced)} comandos com este servidor!")
                
                # Mostra os comandos sincronizados
                command_list = "\n".join([f"‚Ä¢ /{command.name}" for command in synced])
                if command_list:
                    await ctx.send(f"Comandos dispon√≠veis:\n{command_list}")
            except Exception as e:
                await ctx.send(f"‚ùå Erro durante a sincroniza√ß√£o: {e}")
        else:
            await ctx.send("‚ùå Voc√™ precisa ser administrador para usar este comando!")

async def setup(bot):
    """Adiciona o cog ao bot."""
    await bot.add_cog(MiscCommands(bot))
