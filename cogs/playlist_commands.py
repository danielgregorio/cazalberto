import discord
import os
import asyncio
import logging
from discord.ext import commands
from discord import app_commands
import random

from config import PLAYLISTS_FILE, COMMANDS_FILE
from utils import load_json, save_json

class PlaylistCommands(commands.Cog):
    """Comandos para gerenciar playlists de √°udio."""
    
    def __init__(self, bot):
        self.bot = bot
        self.custom_commands = load_json(COMMANDS_FILE)
        self.playlists = load_json(PLAYLISTS_FILE)
    
    @app_commands.command(name="criar_playlist", description="Cria uma nova playlist vazia.")
    @app_commands.describe(nome="Nome da playlist a ser criada")
    async def criar_playlist(self, ctx: discord.Interaction, nome: str):
        """Cria uma nova playlist vazia."""
        nome = nome.lower().strip()
        
        # Verifica se o nome √© v√°lido
        if not nome or len(nome) > 32:
            await ctx.response.send_message("‚ùå O nome da playlist deve ter entre 1 e 32 caracteres.")
            return
        
        # Verifica se a playlist j√° existe
        if nome in self.playlists:
            await ctx.response.send_message(f"‚ùå A playlist `{nome}` j√° existe!")
            return
        
        # Cria a nova playlist vazia
        self.playlists[nome] = []
        save_json(PLAYLISTS_FILE, self.playlists)
        
        await ctx.response.send_message(f"‚úÖ Playlist `{nome}` criada com sucesso!")
    
    @app_commands.command(name="adicionar_playlist", description="Adiciona um √°udio a uma playlist existente.")
    @app_commands.describe(
        playlist="Nome da playlist onde adicionar o √°udio",
        audio="Nome do comando de √°udio a ser adicionado"
    )
    async def adicionar_playlist(self, ctx: discord.Interaction, playlist: str, audio: str):
        """Adiciona um √°udio a uma playlist existente."""
        playlist = playlist.lower().strip()
        audio = audio.lower().strip()
        
        # Verifica se a playlist existe
        if playlist not in self.playlists:
            await ctx.response.send_message(f"‚ùå A playlist `{playlist}` n√£o existe! Use `/criar_playlist` para criar.")
            return
        
        # Verifica se o √°udio existe
        if audio not in self.custom_commands:
            await ctx.response.send_message(f"‚ùå O √°udio `{audio}` n√£o existe! Use `/aprendido` para ver a lista de √°udios.")
            return
        
        # Verifica se o √°udio j√° est√° na playlist
        if audio in self.playlists[playlist]:
            await ctx.response.send_message(f"‚ùå O √°udio `{audio}` j√° est√° na playlist `{playlist}`.")
            return
        
        # Adiciona o √°udio √† playlist
        self.playlists[playlist].append(audio)
        save_json(PLAYLISTS_FILE, self.playlists)
        
        await ctx.response.send_message(f"‚úÖ √Åudio `{audio}` adicionado √† playlist `{playlist}`!")
    
    @app_commands.command(name="remover_playlist", description="Remove um √°udio de uma playlist.")
    @app_commands.describe(
        playlist="Nome da playlist de onde remover o √°udio",
        audio="Nome do comando de √°udio a ser removido"
    )
    async def remover_playlist(self, ctx: discord.Interaction, playlist: str, audio: str):
        """Remove um √°udio de uma playlist."""
        playlist = playlist.lower().strip()
        audio = audio.lower().strip()
        
        # Verifica se a playlist existe
        if playlist not in self.playlists:
            await ctx.response.send_message(f"‚ùå A playlist `{playlist}` n√£o existe!")
            return
        
        # Verifica se o √°udio est√° na playlist
        if audio not in self.playlists[playlist]:
            await ctx.response.send_message(f"‚ùå O √°udio `{audio}` n√£o est√° na playlist `{playlist}`.")
            return
        
        # Remove o √°udio da playlist
        self.playlists[playlist].remove(audio)
        save_json(PLAYLISTS_FILE, self.playlists)
        
        await ctx.response.send_message(f"‚úÖ √Åudio `{audio}` removido da playlist `{playlist}`!")
    
    @app_commands.command(name="ver_playlist", description="Mostra os √°udios em uma playlist.")
    @app_commands.describe(playlist="Nome da playlist para visualizar")
    async def ver_playlist(self, ctx: discord.Interaction, playlist: str):
        """Mostra os √°udios em uma playlist espec√≠fica."""
        playlist = playlist.lower().strip()
        
        # Verifica se a playlist existe
        if playlist not in self.playlists:
            await ctx.response.send_message(f"‚ùå A playlist `{playlist}` n√£o existe!")
            return
        
        # Verifica se a playlist est√° vazia
        if not self.playlists[playlist]:
            await ctx.response.send_message(f"üìÇ A playlist `{playlist}` est√° vazia.")
            return
        
        # Lista os √°udios da playlist
        audio_list = "\n".join([f"{i+1}. {audio}" for i, audio in enumerate(self.playlists[playlist])])
        await ctx.response.send_message(f"üéµ Playlist: `{playlist}` ({len(self.playlists[playlist])} √°udios)\n\n{audio_list}")
    
    @app_commands.command(name="listar_playlists", description="Lista todas as playlists dispon√≠veis.")
    async def listar_playlists(self, ctx: discord.Interaction):
        """Lista todas as playlists dispon√≠veis."""
        # Verifica se existem playlists
        if not self.playlists:
            await ctx.response.send_message("üìÇ N√£o h√° playlists criadas ainda.")
            return
        
        # Lista todas as playlists e seus tamanhos
        playlist_info = "\n".join([f"‚Ä¢ `{name}`: {len(items)} √°udios" for name, items in self.playlists.items()])
        await ctx.response.send_message(f"üìã Playlists dispon√≠veis ({len(self.playlists)}):\n\n{playlist_info}")
    
    @app_commands.command(name="excluir_playlist", description="Exclui uma playlist existente.")
    @app_commands.describe(playlist="Nome da playlist a ser exclu√≠da")
    async def excluir_playlist(self, ctx: discord.Interaction, playlist: str):
        """Exclui uma playlist existente."""
        playlist = playlist.lower().strip()
        
        # Verifica se a playlist existe
        if playlist not in self.playlists:
            await ctx.response.send_message(f"‚ùå A playlist `{playlist}` n√£o existe!")
            return
        
        # Remove a playlist
        del self.playlists[playlist]
        save_json(PLAYLISTS_FILE, self.playlists)
        
        await ctx.response.send_message(f"üóëÔ∏è Playlist `{playlist}` exclu√≠da com sucesso!")
    
    @app_commands.command(name="tocar_playlist", description="Toca todos os √°udios de uma playlist em sequ√™ncia.")
    @app_commands.describe(
        playlist="Nome da playlist a ser tocada",
        repetir="N√∫mero de vezes para repetir a playlist (opcional)",
        aleatorio="Tocar em ordem aleat√≥ria (opcional)"
    )
    async def tocar_playlist(
        self,
        ctx: discord.Interaction, 
        playlist: str, 
        repetir: int = 1,
        aleatorio: bool = False
    ):
        """Toca todos os √°udios de uma playlist em sequ√™ncia."""
        playlist = playlist.lower().strip()
        
        # Limita o n√∫mero de repeti√ß√µes para evitar spam
        repetir = max(1, min(5, repetir))
        
        # Verifica se a playlist existe
        if playlist not in self.playlists:
            await ctx.response.send_message(f"‚ùå A playlist `{playlist}` n√£o existe!")
            return
        
        # Verifica se a playlist est√° vazia
        if not self.playlists[playlist]:
            await ctx.response.send_message(f"üìÇ A playlist `{playlist}` est√° vazia.")
            return
        
        # Verifica se o usu√°rio est√° em um canal de voz
        if not ctx.user.voice:
            await ctx.response.send_message("‚ùå Voc√™ precisa estar em um canal de voz!")
            return
        
        # Conecta ao canal de voz
        vc = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        if not vc or not vc.is_connected():
            vc = await ctx.user.voice.channel.connect()
        
        # Responde inicialmente
        await ctx.response.send_message(
            f"üéµ Tocando playlist `{playlist}` "
            f"({'ordem aleat√≥ria' if aleatorio else 'sequencial'})"
            f"{f', {repetir} vezes' if repetir > 1 else ''}"
        )
        
        # Fun√ß√£o para reproduzir a playlist
        async def play_playlist_items():
            # Lista de √°udios a serem tocados
            audios_to_play = self.playlists[playlist].copy()
            
            for _ in range(repetir):
                # Embaralha se for aleat√≥rio
                if aleatorio:
                    random.shuffle(audios_to_play)
                
                for audio in audios_to_play:
                    # Verifica se o √°udio ainda existe
                    if audio in self.custom_commands:
                        audio_path = self.custom_commands[audio]
                        
                        # Verifica se ainda est√° conectado
                        if not vc.is_connected():
                            return
                        
                        # Para qualquer √°udio atual e toca o pr√≥ximo
                        if vc.is_playing():
                            vc.stop()
                        
                        # Toca o √°udio e aguarda
                        vc.play(discord.FFmpegPCMAudio(audio_path))
                        
                        # Envia mensagem informando o √°udio atual
                        try:
                            await ctx.followup.send(f"üéµ Tocando: `{audio}` da playlist `{playlist}`")
                        except:
                            pass  # Ignora erros de mensagem
                        
                        # Pequena pausa antes de verificar se o √°udio ainda est√° tocando
                        await asyncio.sleep(1)
                        
                        # Espera at√© que o √°udio termine
                        while vc.is_playing():
                            await asyncio.sleep(0.5)
                        
                        # Pequena pausa entre √°udios
                        await asyncio.sleep(1)
            
            # Envia mensagem quando terminar
            try:
                await ctx.followup.send(f"‚úÖ Reprodu√ß√£o da playlist `{playlist}` conclu√≠da!")
            except:
                pass  # Ignora erros de mensagem
        
        # Inicia a reprodu√ß√£o em segundo plano
        asyncio.create_task(play_playlist_items())

async def setup(bot):
    """Adiciona o cog ao bot."""
    await bot.add_cog(PlaylistCommands(bot))
